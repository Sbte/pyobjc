#!/usr/bin/env python3
import subprocess
import pathlib
import configparser
import glob

IGNORE = {
    # Frameworks not present in the latest SDK
    "GameCenter",
    "InterfaceBuilderKit"
    "Message",
    "PubSub",
}


BASE = pathlib.Path(__file__).resolve().parent.parent

SDK_VERSION = subprocess.check_output(["xcrun", "-sdk", "macosx", "--show-sdk-version"]).decode()

scan_failed = []
compile_failed = []
for nm in BASE.glob("pyobjc-framework-*"):
    cfg = configparser.RawConfigParser()
    cfg.read(nm / "metadata" / "metadata.ini")

    for section in cfg.sections():
        if section in IGNORE:
            continue
        print(nm.name, section)
        overrides = nm / "metadata" / (cfg[section]["framework"] + ".fwinfo")

        try:
            subprocess.check_call(
                [
                    "objective-metadata-tool",
                    f"--ini-section={section}",
                    "scan",
                    "--arch=x86_64,arm64",
                    f"--sdk={SDK_VERSION}",
                ],
                cwd=nm,
            )

        except subprocess.CalledProcessError:
            scan_failed.append((nm.name, section))
            continue

        subprocess.call(["git", "checkout", overrides])

        # Only keep the latest version of the scanned headers for
        # every major release of macOS (starting at 11.0)
        for fn in glob.glob(f"{nm}/metadata.*/*-{SDK_VERSION.split('.')[0]}.*"):
            if SDK_VERSION in fn:
                subprocess.call(["git", "add", fn])
            else:
                subprocess.call(["git", "rm", fn])

        try:
            subprocess.check_call(
                ["objective-metadata-tool", f"--ini-section={section}", "compile"],
                cwd=nm,
            )
        except subprocess.CalledProcessError:
            compile_failed.append((nm.name, section))

            # Undo the compile attempt
            if "python-package" in cfg[section]:
                subprocess.call(
                    [
                        "git",
                        "checkout",
                        nm
                        / "Lib"
                        / cfg[section]["python-package"].replace(".", "/")
                        / "_metadata.py",
                    ]
                )
            else:
                subprocess.call(
                    [
                        "git",
                        "checkout",
                        nm / "Lib" / cfg[section]["framework"] / "_metadata.py",
                    ]
                )
            continue


if scan_failed:
    print("Scanning failed for:")
    for wrapper, section in scan_failed:
        print(f"* {wrapper} - {section}")
    print("")

if compile_failed:
    print("Compiling failed for:")
    for wrapper, section in compile_failed:
        print(f"* {wrapper} - {section}")
    print("")
